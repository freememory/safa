/********************************************************************************************
------------ AUTOGENERATED -------------
DO NOT EDIT THIS FILE BY HAND!
------------ AUTOGENERATED -------------
********************************************************************************************/
package io.baschel.safa;

import java.util.List;

abstract class Expr 
{
	abstract <R> R accept(Visitor<R> visitor);
	
	interface Visitor<R>
	{
		R visitGroupingExpr(Expr.Grouping grouping);
		R visitBinaryExpr(Expr.Binary binary);
		R visitUnaryExpr(Expr.Unary unary);
		R visitLiteralExpr(Expr.Literal literal);
		R visitPostfixExpr(Expr.Postfix postfix);
	} 
	
	static class Grouping extends Expr
	{
		Grouping(Expr expression)
		{
			this.expression = expression;
		}

		<R> R accept(Visitor<R> visitor)
		{
			return visitor.visitGroupingExpr(this);
		}
		
		final Expr expression;
	}

	static class Binary extends Expr
	{
		Binary(Expr left, Token operator, Expr right)
		{
			this.left = left;
			this.operator = operator;
			this.right = right;
		}

		<R> R accept(Visitor<R> visitor)
		{
			return visitor.visitBinaryExpr(this);
		}
		
		final Expr left;
		final Token operator;
		final Expr right;
	}

	static class Unary extends Expr
	{
		Unary(Token operator, Expr right)
		{
			this.operator = operator;
			this.right = right;
		}

		<R> R accept(Visitor<R> visitor)
		{
			return visitor.visitUnaryExpr(this);
		}
		
		final Token operator;
		final Expr right;
	}

	static class Literal extends Expr
	{
		Literal(Object value)
		{
			this.value = value;
		}

		<R> R accept(Visitor<R> visitor)
		{
			return visitor.visitLiteralExpr(this);
		}
		
		final Object value;
	}

	static class Postfix extends Expr
	{
		Postfix(Expr left, Token operator)
		{
			this.left = left;
			this.operator = operator;
		}

		<R> R accept(Visitor<R> visitor)
		{
			return visitor.visitPostfixExpr(this);
		}
		
		final Expr left;
		final Token operator;
	}
}
